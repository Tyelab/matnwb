%% NWB

generateCore();

%% Creating nwb file for individual session

nwb = NwbFile( ...
    'session_description', 'mouse in conflict task',...
    'identifier', '4470R_Rew1', ...
    'session_start_time', datetime(2022, 9, 3, 11, 52, 16), ...
    'general_experimenter', 'Anousheh Bakhti-Suroosh', ... % optional
    'general_session_id', 'session_1234', ... % optional
    'general_institution', 'Salk Institute for Biological Studies', ... % optional
    'general_related_publications', 'DOI:10.1038/nn.4553 | DOI:10.1038/s41586-018-0682-1'); % optional
nwb

%% Creating subject information

subject = types.core.Subject( ...
    'subject_id', '4470R', ...
    'age', ' ', ...
    'description', 'C57BL/6', ...
    'species', 'Mus musculus', ...
    'genotype', 'WT', ...
    'sex', 'M')

nwb.general_subject = subject; 

nwb
nwb.general_subject

%% Spatial Series

position_data = [linspace(0,10,100); linspace(0,8,100)];

spatial_series_ts = types.core.SpatialSeries( ...
    'data', position_data, ...
    'reference_frame', '(0,0) is bottom left corner', ...
    'timestamps', linspace(0,100)/200)

Position = types.core.Position('SpatialSeries', spatial_series_ts);

%% Creating a processing module

behavior_mod = types.core.ProcessingModule( ...
    'description', 'contains behavioral data')

behavior_mod

% Add Position object (that holds the SpatialSeries object)
behavior_mod.nwbdatainterface.set(...
    'Position', Position)

% Add the processing module to the NWBFile object, and name it "behavior

nwb.processing.set('behavior', behavior_mod);

%% 

trials = types.core.TimeIntervals( ...
    'colnames', {'start_time', 'stop_time', 'correct'}, ...
    'description', 'trial data and properties', ...
    'id', types.hdmf_common.ElementIdentifiers('data', 0:2), ...
    'start_time', types.hdmf_common.VectorData( ...
        'data', [0.1, 1.5, 2.5], ...
   	    'description','start time of trial in seconds' ...
    ), ...
    'stop_time', types.hdmf_common.VectorData( ...
        'data', [1.0, 2.0, 3.0], ...
   	    'description','end of each trial in seconds' ...
    ), ...
    'correct', types.hdmf_common.VectorData( ...
        'data', [false, true, false], ...
   	    'description', 'whether the trial was correct') ...
    );
nwb.intervals_trials = trials;

%% Saving nwb file
nwbExport(nwb, 'test_behavior.nwb');

%% Read saved nwb file
read_nwbfile = nwbRead('test_behavior.nwb')

% Read specific part of the file
read_nwbfile.processing.get('behavior').nwbdatainterface.get('Position').spatialseries.get('SpatialSeries')